%####################################### VARIABLES #######################################
var ws
var lcmoves // for last clicked moves. // great because we don't have to send to server.
var lmove // for last move (used to unhighlight)
var height = 3.6
var originaljss = {
	'.white': { 'stroke':'#fff', 'fill':'#becfcf' },
	'.black': { 'stroke':'#000', 'fill':'#444' },
	'.whitesquares': { 'fill':'#4dffff', 'background-color':'#4dffff' },
	'.blacksquares': { 'fill':'#4d4dff', 'background-color':'#4d4dff' },
	'h2:hover': { 'color':'#4d4dff' },
	'h2:active': { 'color':'#4dffff' },
	'.button:hover': { 'background-color':'#4d4dff' },
	'.button:active': { 'background-color':'#4dffff' }
}
var originalprefs = { 'jss':originaljss, 'sound':1, 'highlight':0 }
setPrefs(originalprefs)
var latestprefs

var userprefs
<% my $str=''; if( $username ne 'default' ){ $str = mojo::getUserPrefs($username,'directembed') } %><%== $str; %>
var username = '<%== $username; %>';
var colorrequested = '<%== $colorrequested; %>' // this is passed as a ws param, which mojo then checks and possibly grants.
var IDtopromote

%####################################### FUNCTIONS #######################################
if ("WebSocket" in window){ ws = new WebSocket('<%== url_for('socket')->to_abs %>'+"?room=$roomname&color=$color") }
else{ alert( 'Your browser does not support websockets, which are essential for this program.') }


function clunk() {
	if( $('input[type=checkbox][name=sound]').is(':checked') ){	document.getElementById('clunk').play() }
}
function uniqueColor() {
	colorw = jss.get('.whitesquares').fill
	colorb = jss.get('.blacksquares').fill
	return 'purple'
}
function changeColor( object, color, fill ) {
	var colortopseudo = {}; colortopseudo['white'] = 'active'; colortopseudo['black'] = 'hover';
	if( object == 'square' ){
		jss.set( '.button:'+colortopseudo[color], { 'background-color':fill } )
		jss.set( 'h2:'+colortopseudo[color], { 'color':fill } )
		jss.set( '.'+color+'squares', { 'background-color':fill, 'fill':fill })
	}
	else if( object == 'piece' ) jss.set( '.'+color, { 'fill':fill } );
	else if( object == 'stroke' ) jss.set( '.'+color, { 'stroke':fill } );
}
function changeHeight() {
	jss.set( '#login', { 'height':height+'vmin' } )
	height = 62-height
	jss.set( '#preferences', { 'height':height+'vmin' } )
}
function unfillSquares(coords) {
	for (i=0; i<coords.length; ++i){
		document.getElementById(coords[i]).removeAttribute('style')
	}
}
$(document).ready( function() {
	$('input[value=Login]').click(setUsername)
	$('#username').keyup( function(event) { if( event.which==13 ){ setUsername() } } )
	$('.inputcolor').keyup( function(event) { if( event.which==13 ){
		var object = $(this).data('object')
		var color = $(this).data('color')
		var fill = $(this).val()
		changeColor( object, color, fill )
	}})
	$('#start').click( function() {
		var roomname = ( $('#roomname').val() || 'Mojo' )
		ws.send( JSON.stringify({ 'command':'setroom', 'roomname':roomname }) )
		var colorrequested = $('#selectcolor').val()
		ws.send( JSON.stringify({ 'command':'setcolor', 'colorrequested':colorrequested }) )
	})
})



%################################# PREFERENCES FUNCTIONS #################################
function setPrefs(prefs) {
	Object.keys(prefs.jss).forEach( function (key) {
		if( key !== '#login' && key !== '#preferences' ){ jss.set( key, prefs.jss[key] ) }
	})
	$('input[type=checkbox][name=sound]').prop('checked',prefs.sound)
	$('input[type=checkbox][name=highlight]').prop('checked',prefs.highlight)
}
function resetPrefs() {
	setPrefs(originalprefs)
	if(typeof(userprefs) !== 'undefined'){ setPrefs(userprefs) }
	setPrefs(latestprefs) // latest meaning most recent save
}
function loadPrefs(prefs) {
	setPrefs(originalprefs)
	if( prefs !== '' ){
		userprefs = prefs
		setPrefs(userprefs)
	}
	$('#currentusername').html('You are logged in as '+username+'.')
}
function savePrefs() {
	var latestjss = jss.get() // latest meaning most recent save
	var latestsound = $('input[type=checkbox][name=sound]').is(':checked')
	var latesthighlight = $('input[type=checkbox][name=highlight]').is(':checked')
	latestprefs = { 'jss':latestjss, 'sound':latestsound, 'highlight':latesthighlight }
	ws.send( JSON.stringify({ 'command':'saveuserprefs', 'username':username, 'prefs':latestprefs }) )
}
function setUsername() {
	username = $('#username').val()
	if( username == '' ){ $('#login > div').html('You are not logged in.') }
	else{ ws.send( JSON.stringify({ 'command':'getuserprefs', 'username':username }) ) }
}




function promoteQuestion(color) {
	alert( 'What would you like to promote your '+color+' pawn to?')
	var choice = 'queen'
	ws.send( JSON.stringify({ 'command':'promote', 'type':choice }) )
}
function sendCoord(evt) {
	x = evt.currentTarget.getAttribute('x')
	y = evt.currentTarget.getAttribute('y')
	ws.send( JSON.stringify({'command': 'squareclicked', 'x': x, 'y': 9-y }) )
}
function sendMessage(evt,message) {
		ws.send( JSON.stringify({'command': 'donothing', 'message': message}) )
}
ws.onmessage = function(event) {
	document.getElementById('container').innerHTML += 'MS!'
	var json = JSON.parse(event.data)
	if( typeof(json.y) !== 'undefined' ){ json.y = 9-json.y }
	if( typeof(json.message) !== 'undefined' ){
		document.getElementById('container').innerHTML += ' message is "'+json.message+'".' + '<br /><br />'
	}
	if( json.command=='loadprefs' ){
		loadPrefs(json.prefs)
	}
	else if( json.command=='setcolor' ){
		$('#currentcolor').html('You are '+json.colorrequested+'.')
	}
	else if( json.command=='setroom' ){
		$('#currentroom').html('You are in room '+json.roomname+'.')
	}
	else if( json.command=='fillsquares' ){
		if( typeof(lcmoves) !== 'undefined' ){ unfillSquares(lcmoves) }
		for (i=0; i<json.moves.length; ++i){
			document.getElementById(json.moves[i]).setAttribute('style',"opacity:0.5")
		}
		lcmoves = json.moves
	}
	else if( json.command=='promote' ){
		//var piecetoclone = document.getElementById(json.ID)
		//var guts = piecetoclone.firstChild //.cloneNode(true) // we only clone about the INSIDE
		//alert('json.ID is: '+json.ID)
		//alert('IDtopromote is: '+IDtopromote)


		//alert('newgroup is: '+newgroup)
		//var pawn = document.getElementById(IDtopromote) // IDtopromote is for the pawn
		//alert('pawn is: '+pawn)

		$('#'+IDtopromote).empty()
		$('#'+json.ID+' > g').clone().appendTo('#'+IDtopromote)

		//alert('removed')
		//pawn.removeChild( pawn.firstChild )
		//pawn.appendChild( newgroup )
/*
		var oldpiece = document.getElementById(IDtopromote) // IDtopromote is the pawn
		var x = oldpiece.getAttribute('x') // get position of pawn
		var y = oldpiece.getAttribute('y')
		oldpiece.setAttribute('x',-1) // move off the pawn
		oldpiece.setAttribute('y',-1)
		alert(IDtopromote+"retired")
		oldpiece.setAttribute('ID',IDtopromote+"retired") // change pawn's ID
		alert('ID changed to '+oldpiece.getAttribute('ID'))
		var newpiece = document.getElementById(json.ID).cloneNode(true) // clone the piece who has the same type (Perl sends correct ID for that)
		newpiece.setAttributeNS(null,'ID',IDtopromote) // the clone now appears as if it was the old piece
		pieces.appendChild(newpiece)
		newpiece.setAttribute('x',x) // move on the clone
		newpiece.setAttribute('y',3)
		var mid = newpiece.getAttribute('ID')
		alert(mid)
		document.getElementByID(mid).setAttributeNS(null,'y',4) // this fails for some odd reason, regardless if NS used or not....

*/
		alert('done')
	}
	else if( json.command=='move' ){
		clunk()
		if( typeof(lcmoves) !== 'undefined' ){ unfillSquares(lcmoves) }
		if( typeof(lmove) !== 'undefined' ){ jss.remove( '#square'+lmove.x+(9-lmove.y) ) }
		document.getElementById(json.ID).setAttribute('x',json.x)
		document.getElementById(json.ID).setAttribute('y',json.y)
		if( $('input[type=checkbox][name=highlight]').is(':checked') ){ jss.set( '#square'+json.x+(9-json.y), { 'fill':uniqueColor() } ) }
		if( typeof(json.promote) !== 'undefined' ){
			promoteQuestion(json.promote)
			IDtopromote = json.ID
		}
		lmove = { 'x':json.x, 'y':json.y }
	}
	if( typeof(json.IDtoremove) !== 'undefined' ){
		document.getElementById(json.IDtoremove).setAttribute('x',-1)
		document.getElementById(json.IDtoremove).setAttribute('y',-1)
	}
}
ws.onopen = function(event) {
	document.getElementById('container').innerHTML += ' jsworking. '
	sendMessage(event,'WebSocket support works! â™¥')
}
